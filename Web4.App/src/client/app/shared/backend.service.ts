//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v2.41.5995.34157 (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx';
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';
import { Config } from './index';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');
export const JSON_PARSE_REVIVER = new OpaqueToken('JSON_PARSE_REVIVER');

@Injectable()
export class BackendService {
    private http: Http = null;
    private baseUrl: string = undefined;
    private jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor( @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string, @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : Config.API;
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    eventReports_Get(eventId: number, filter: string): Observable<EventReportModel> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/report?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEventReports_Get(response);
        });
    }

    private processEventReports_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: EventReportModel = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new EventReportModel(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Get(filter: string): Observable<Event[]> {
        var url = this.baseUrl + "/api/v1/events?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Get(response);
        });
    }

    private processEvents_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new Event(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Post(entity: Event): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events?";

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Post(response);
        });
    }

    private processEvents_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Event(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_GetById(id: number, filter: string): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_GetById(response);
        });
    }

    private processEvents_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Event(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Put(id: number, entity: Event): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Put(response);
        });
    }

    private processEvents_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Event(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Delete(id: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Delete(response);
        });
    }

    private processEvents_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Get(filter: string): Observable<FeedbackDefinition[]> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Get(response);
        });
    }

    private processFeedbackDefinitions_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new FeedbackDefinition(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Post(entity: FeedbackDefinition): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions?";

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Post(response);
        });
    }

    private processFeedbackDefinitions_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new FeedbackDefinition(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_GetById(id: number, filter: string): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_GetById(response);
        });
    }

    private processFeedbackDefinitions_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new FeedbackDefinition(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Put(id: number, entity: FeedbackDefinition): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Put(response);
        });
    }

    private processFeedbackDefinitions_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new FeedbackDefinition(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Delete(id: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Delete(response);
        });
    }

    private processFeedbackDefinitions_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Get(): Observable<Feedback[]> {
        var url = this.baseUrl + "/api/v1/feedbacks?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Get(response);
        });
    }

    private processFeedbacks_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new Feedback(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Post(entity: Feedback): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks?";

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Post(response);
        });
    }

    private processFeedbacks_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Feedback(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_GetById(id: number): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_GetById(response);
        });
    }

    private processFeedbacks_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Feedback(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Put(id: number, entity: Feedback): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Put(response);
        });
    }

    private processFeedbacks_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Feedback(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Delete(id: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Delete(response);
        });
    }

    private processFeedbacks_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_ApiInfo(): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/apiinfo?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_ApiInfo(response);
        });
    }

    private processLookup_ApiInfo(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_Roles(): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/roles?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_Roles(response);
        });
    }

    private processLookup_Roles(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_Levels(): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/levels?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_Levels(response);
        });
    }

    private processLookup_Levels(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_LevelsForEvent(eventId: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/levels/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_LevelsForEvent(response);
        });
    }

    private processLookup_LevelsForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_TagsForEvent(eventId: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/tags/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_TagsForEvent(response);
        });
    }

    private processLookup_TagsForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_SpeakersForEvent(eventId: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/speakers/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_SpeakersForEvent(response);
        });
    }

    private processLookup_SpeakersForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_TracksForEvent(eventId: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/lookup/tracks/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_TracksForEvent(response);
        });
    }

    private processLookup_TracksForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Get(filter: string, language: string): Observable<ResourceText[]> {
        var url = this.baseUrl + "/api/v1/resources?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";
        if (language !== undefined && language !== null)
            url += "language=" + encodeURIComponent("" + language) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Get(response);
        });
    }

    private processResourceTexts_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new ResourceText(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Post(entity: ResourceText): Observable<ResourceText> {
        var url = this.baseUrl + "/api/v1/resources?";

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Post(response);
        });
    }

    private processResourceTexts_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new ResourceText(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Put(id: number, entity: ResourceText): Observable<ResourceText> {
        var url = this.baseUrl + "/api/v1/resources/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Put(response);
        });
    }

    private processResourceTexts_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new ResourceText(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Delete(id: number): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/resources/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Delete(response);
        });
    }

    private processResourceTexts_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    roles_Get(): Observable<RoleAdminBindingModel[]> {
        var url = this.baseUrl + "/api/v1/admin/roles?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRoles_Get(response);
        });
    }

    private processRoles_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: RoleAdminBindingModel[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new RoleAdminBindingModel(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Get(eventId: number, filter: string): Observable<Session[]> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Get(response);
        });
    }

    private processSessions_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new Session(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Post(entity: Session, eventId: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Post(response);
        });
    }

    private processSessions_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Session(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_GetById(eventId: number, id: number, filter: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_GetById(response);
        });
    }

    private processSessions_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Session(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Put(id: number, entity: Session, eventId: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Put(response);
        });
    }

    private processSessions_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new Session(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Delete(id: number, eventId: string): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Delete(response);
        });
    }

    private processSessions_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    user_Token(login: LoginBindingModel): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/user/token?";
        var content = JSON.stringify(login ? login.toJS() : null);
        console.log(url, content);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            console.log(response);
            return this.processUser_Token(response);
        });
    }

    private processUser_Token(response: Response) {
        var data = response.text();
        var status = response.status.toString();
        console.log(status);
        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    user_Profile(): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/user/profile?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUser_Profile(response);
        });
    }

    private processUser_Profile(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Get(filter: string): Observable<User[]> {
        var url = this.baseUrl + "/api/v1/admin/users?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Get(response);
        });
    }

    private processUsers_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User[] = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(new User(item));
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Post(entity: UserAdminBindingModel): Observable<User> {
        var url = this.baseUrl + "/api/v1/admin/users?";

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Post(response);
        });
    }

    private processUsers_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new User(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Put(id: string, entity: UserAdminBindingModel): Observable<User> {
        var url = this.baseUrl + "/api/v1/admin/users/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity ? entity.toJS() : null);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Put(response);
        });
    }

    private processUsers_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            result200 = resultData200 ? new User(resultData200) : null;
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Delete(id: string): Observable<{ [key: string]: any; }> {
        var url = this.baseUrl + "/api/v1/admin/users/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Delete(response);
        });
    }

    private processUsers_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string]: any; } = null;
            var resultData200 = data === "" ? null : JSON.parse(data, this.jsonParseReviver);
            if (resultData200) {
                result200 = {};
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        result200[key] = resultData200[key] !== undefined ? resultData200[key] : null;
                }
            }
            return result200;
        }
        else {
            throw "error_no_callback_for_the_received_http_status";
        }
    }
}

export class EventReportModel {
    id: number;
    title: string;
    startDate: Date;
    endDate: Date;
    location: string;
    averageRate: string;
    quesstionTitle0: string;
    quesstionTitle1: string;
    quesstionTitle2: string;
    quesstionTitle3: string;
    quesstionTitle4: string;
    quesstionTitle5: string;
    quesstionTitle6: string;
    quesstionTitle7: string;
    quesstionTitle8: string;
    quesstionTitle9: string;
    feedbacks: FeedbackReportModel[];
    sessions: SessionReportModel[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.title = data["title"] !== undefined ? data["title"] : null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : null;
            this.location = data["location"] !== undefined ? data["location"] : null;
            this.averageRate = data["averageRate"] !== undefined ? data["averageRate"] : null;
            this.quesstionTitle0 = data["quesstionTitle0"] !== undefined ? data["quesstionTitle0"] : null;
            this.quesstionTitle1 = data["quesstionTitle1"] !== undefined ? data["quesstionTitle1"] : null;
            this.quesstionTitle2 = data["quesstionTitle2"] !== undefined ? data["quesstionTitle2"] : null;
            this.quesstionTitle3 = data["quesstionTitle3"] !== undefined ? data["quesstionTitle3"] : null;
            this.quesstionTitle4 = data["quesstionTitle4"] !== undefined ? data["quesstionTitle4"] : null;
            this.quesstionTitle5 = data["quesstionTitle5"] !== undefined ? data["quesstionTitle5"] : null;
            this.quesstionTitle6 = data["quesstionTitle6"] !== undefined ? data["quesstionTitle6"] : null;
            this.quesstionTitle7 = data["quesstionTitle7"] !== undefined ? data["quesstionTitle7"] : null;
            this.quesstionTitle8 = data["quesstionTitle8"] !== undefined ? data["quesstionTitle8"] : null;
            this.quesstionTitle9 = data["quesstionTitle9"] !== undefined ? data["quesstionTitle9"] : null;
            if (data["feedbacks"] && data["feedbacks"].constructor === Array) {
                this.feedbacks = [];
                for (let item of data["feedbacks"])
                    this.feedbacks.push(new FeedbackReportModel(item));
            }
            if (data["sessions"] && data["sessions"].constructor === Array) {
                this.sessions = [];
                for (let item of data["sessions"])
                    this.sessions.push(new SessionReportModel(item));
            }
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["startDate"] = this.startDate ? new Date(this.startDate.toString()) : null;
        data["endDate"] = this.endDate ? new Date(this.endDate.toString()) : null;
        data["location"] = this.location !== undefined ? this.location : null;
        data["averageRate"] = this.averageRate !== undefined ? this.averageRate : null;
        data["quesstionTitle0"] = this.quesstionTitle0 !== undefined ? this.quesstionTitle0 : null;
        data["quesstionTitle1"] = this.quesstionTitle1 !== undefined ? this.quesstionTitle1 : null;
        data["quesstionTitle2"] = this.quesstionTitle2 !== undefined ? this.quesstionTitle2 : null;
        data["quesstionTitle3"] = this.quesstionTitle3 !== undefined ? this.quesstionTitle3 : null;
        data["quesstionTitle4"] = this.quesstionTitle4 !== undefined ? this.quesstionTitle4 : null;
        data["quesstionTitle5"] = this.quesstionTitle5 !== undefined ? this.quesstionTitle5 : null;
        data["quesstionTitle6"] = this.quesstionTitle6 !== undefined ? this.quesstionTitle6 : null;
        data["quesstionTitle7"] = this.quesstionTitle7 !== undefined ? this.quesstionTitle7 : null;
        data["quesstionTitle8"] = this.quesstionTitle8 !== undefined ? this.quesstionTitle8 : null;
        data["quesstionTitle9"] = this.quesstionTitle9 !== undefined ? this.quesstionTitle9 : null;
        if (this.feedbacks && this.feedbacks.constructor === Array) {
            data["feedbacks"] = [];
            for (let item of this.feedbacks)
                data["feedbacks"].push(new FeedbackReportModel(item));
        }
        if (this.sessions && this.sessions.constructor === Array) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(new SessionReportModel(item));
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class FeedbackReportModel {
    id: number;
    createDate: Date;
    averageRate: string;
    answer0: string;
    answer1: string;
    answer2: string;
    answer3: string;
    answer4: string;
    answer5: string;
    answer6: string;
    answer7: string;
    answer8: string;
    answer9: string;
    maxRateQuestion0: string;
    maxRateQuestion1: string;
    maxRateQuestion2: string;
    maxRateQuestion3: string;
    maxRateQuestion4: string;
    maxRateQuestion5: string;
    maxRateQuestion6: string;
    maxRateQuestion7: string;
    maxRateQuestion8: string;
    maxRateQuestion9: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.averageRate = data["averageRate"] !== undefined ? data["averageRate"] : null;
            this.answer0 = data["answer0"] !== undefined ? data["answer0"] : null;
            this.answer1 = data["answer1"] !== undefined ? data["answer1"] : null;
            this.answer2 = data["answer2"] !== undefined ? data["answer2"] : null;
            this.answer3 = data["answer3"] !== undefined ? data["answer3"] : null;
            this.answer4 = data["answer4"] !== undefined ? data["answer4"] : null;
            this.answer5 = data["answer5"] !== undefined ? data["answer5"] : null;
            this.answer6 = data["answer6"] !== undefined ? data["answer6"] : null;
            this.answer7 = data["answer7"] !== undefined ? data["answer7"] : null;
            this.answer8 = data["answer8"] !== undefined ? data["answer8"] : null;
            this.answer9 = data["answer9"] !== undefined ? data["answer9"] : null;
            this.maxRateQuestion0 = data["maxRateQuestion0"] !== undefined ? data["maxRateQuestion0"] : null;
            this.maxRateQuestion1 = data["maxRateQuestion1"] !== undefined ? data["maxRateQuestion1"] : null;
            this.maxRateQuestion2 = data["maxRateQuestion2"] !== undefined ? data["maxRateQuestion2"] : null;
            this.maxRateQuestion3 = data["maxRateQuestion3"] !== undefined ? data["maxRateQuestion3"] : null;
            this.maxRateQuestion4 = data["maxRateQuestion4"] !== undefined ? data["maxRateQuestion4"] : null;
            this.maxRateQuestion5 = data["maxRateQuestion5"] !== undefined ? data["maxRateQuestion5"] : null;
            this.maxRateQuestion6 = data["maxRateQuestion6"] !== undefined ? data["maxRateQuestion6"] : null;
            this.maxRateQuestion7 = data["maxRateQuestion7"] !== undefined ? data["maxRateQuestion7"] : null;
            this.maxRateQuestion8 = data["maxRateQuestion8"] !== undefined ? data["maxRateQuestion8"] : null;
            this.maxRateQuestion9 = data["maxRateQuestion9"] !== undefined ? data["maxRateQuestion9"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["averageRate"] = this.averageRate !== undefined ? this.averageRate : null;
        data["answer0"] = this.answer0 !== undefined ? this.answer0 : null;
        data["answer1"] = this.answer1 !== undefined ? this.answer1 : null;
        data["answer2"] = this.answer2 !== undefined ? this.answer2 : null;
        data["answer3"] = this.answer3 !== undefined ? this.answer3 : null;
        data["answer4"] = this.answer4 !== undefined ? this.answer4 : null;
        data["answer5"] = this.answer5 !== undefined ? this.answer5 : null;
        data["answer6"] = this.answer6 !== undefined ? this.answer6 : null;
        data["answer7"] = this.answer7 !== undefined ? this.answer7 : null;
        data["answer8"] = this.answer8 !== undefined ? this.answer8 : null;
        data["answer9"] = this.answer9 !== undefined ? this.answer9 : null;
        data["maxRateQuestion0"] = this.maxRateQuestion0 !== undefined ? this.maxRateQuestion0 : null;
        data["maxRateQuestion1"] = this.maxRateQuestion1 !== undefined ? this.maxRateQuestion1 : null;
        data["maxRateQuestion2"] = this.maxRateQuestion2 !== undefined ? this.maxRateQuestion2 : null;
        data["maxRateQuestion3"] = this.maxRateQuestion3 !== undefined ? this.maxRateQuestion3 : null;
        data["maxRateQuestion4"] = this.maxRateQuestion4 !== undefined ? this.maxRateQuestion4 : null;
        data["maxRateQuestion5"] = this.maxRateQuestion5 !== undefined ? this.maxRateQuestion5 : null;
        data["maxRateQuestion6"] = this.maxRateQuestion6 !== undefined ? this.maxRateQuestion6 : null;
        data["maxRateQuestion7"] = this.maxRateQuestion7 !== undefined ? this.maxRateQuestion7 : null;
        data["maxRateQuestion8"] = this.maxRateQuestion8 !== undefined ? this.maxRateQuestion8 : null;
        data["maxRateQuestion9"] = this.maxRateQuestion9 !== undefined ? this.maxRateQuestion9 : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class SessionReportModel {
    id: number;
    title: string;
    speakerList: string;
    location: string;
    startDate: Date;
    endDate: Date;
    feedbackAllowed: boolean;
    averageRate: string;
    averageRateAnswer0: string;
    averageRateAnswer1: string;
    averageRateAnswer2: string;
    averageRateAnswer3: string;
    averageRateAnswer4: string;
    averageRateAnswer5: string;
    averageRateAnswer6: string;
    averageRateAnswer7: string;
    averageRateAnswer8: string;
    averageRateAnswer9: string;
    quesstionTitle0: string;
    maxRateQuestion0: string;
    quesstionTitle1: string;
    maxRateQuestion1: string;
    quesstionTitle2: string;
    maxRateQuestion2: string;
    quesstionTitle3: string;
    maxRateQuestion3: string;
    quesstionTitle4: string;
    maxRateQuestion4: string;
    quesstionTitle5: string;
    maxRateQuestion5: string;
    quesstionTitle6: string;
    maxRateQuestion6: string;
    quesstionTitle7: string;
    maxRateQuestion7: string;
    quesstionTitle8: string;
    maxRateQuestion8: string;
    quesstionTitle9: string;
    maxRateQuestion9: string;
    feedbacks: FeedbackReportModel[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.title = data["title"] !== undefined ? data["title"] : null;
            this.speakerList = data["speakerList"] !== undefined ? data["speakerList"] : null;
            this.location = data["location"] !== undefined ? data["location"] : null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : null;
            this.feedbackAllowed = data["feedbackAllowed"] !== undefined ? data["feedbackAllowed"] : null;
            this.averageRate = data["averageRate"] !== undefined ? data["averageRate"] : null;
            this.averageRateAnswer0 = data["averageRateAnswer0"] !== undefined ? data["averageRateAnswer0"] : null;
            this.averageRateAnswer1 = data["averageRateAnswer1"] !== undefined ? data["averageRateAnswer1"] : null;
            this.averageRateAnswer2 = data["averageRateAnswer2"] !== undefined ? data["averageRateAnswer2"] : null;
            this.averageRateAnswer3 = data["averageRateAnswer3"] !== undefined ? data["averageRateAnswer3"] : null;
            this.averageRateAnswer4 = data["averageRateAnswer4"] !== undefined ? data["averageRateAnswer4"] : null;
            this.averageRateAnswer5 = data["averageRateAnswer5"] !== undefined ? data["averageRateAnswer5"] : null;
            this.averageRateAnswer6 = data["averageRateAnswer6"] !== undefined ? data["averageRateAnswer6"] : null;
            this.averageRateAnswer7 = data["averageRateAnswer7"] !== undefined ? data["averageRateAnswer7"] : null;
            this.averageRateAnswer8 = data["averageRateAnswer8"] !== undefined ? data["averageRateAnswer8"] : null;
            this.averageRateAnswer9 = data["averageRateAnswer9"] !== undefined ? data["averageRateAnswer9"] : null;
            this.quesstionTitle0 = data["quesstionTitle0"] !== undefined ? data["quesstionTitle0"] : null;
            this.maxRateQuestion0 = data["maxRateQuestion0"] !== undefined ? data["maxRateQuestion0"] : null;
            this.quesstionTitle1 = data["quesstionTitle1"] !== undefined ? data["quesstionTitle1"] : null;
            this.maxRateQuestion1 = data["maxRateQuestion1"] !== undefined ? data["maxRateQuestion1"] : null;
            this.quesstionTitle2 = data["quesstionTitle2"] !== undefined ? data["quesstionTitle2"] : null;
            this.maxRateQuestion2 = data["maxRateQuestion2"] !== undefined ? data["maxRateQuestion2"] : null;
            this.quesstionTitle3 = data["quesstionTitle3"] !== undefined ? data["quesstionTitle3"] : null;
            this.maxRateQuestion3 = data["maxRateQuestion3"] !== undefined ? data["maxRateQuestion3"] : null;
            this.quesstionTitle4 = data["quesstionTitle4"] !== undefined ? data["quesstionTitle4"] : null;
            this.maxRateQuestion4 = data["maxRateQuestion4"] !== undefined ? data["maxRateQuestion4"] : null;
            this.quesstionTitle5 = data["quesstionTitle5"] !== undefined ? data["quesstionTitle5"] : null;
            this.maxRateQuestion5 = data["maxRateQuestion5"] !== undefined ? data["maxRateQuestion5"] : null;
            this.quesstionTitle6 = data["quesstionTitle6"] !== undefined ? data["quesstionTitle6"] : null;
            this.maxRateQuestion6 = data["maxRateQuestion6"] !== undefined ? data["maxRateQuestion6"] : null;
            this.quesstionTitle7 = data["quesstionTitle7"] !== undefined ? data["quesstionTitle7"] : null;
            this.maxRateQuestion7 = data["maxRateQuestion7"] !== undefined ? data["maxRateQuestion7"] : null;
            this.quesstionTitle8 = data["quesstionTitle8"] !== undefined ? data["quesstionTitle8"] : null;
            this.maxRateQuestion8 = data["maxRateQuestion8"] !== undefined ? data["maxRateQuestion8"] : null;
            this.quesstionTitle9 = data["quesstionTitle9"] !== undefined ? data["quesstionTitle9"] : null;
            this.maxRateQuestion9 = data["maxRateQuestion9"] !== undefined ? data["maxRateQuestion9"] : null;
            if (data["feedbacks"] && data["feedbacks"].constructor === Array) {
                this.feedbacks = [];
                for (let item of data["feedbacks"])
                    this.feedbacks.push(new FeedbackReportModel(item));
            }
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["speakerList"] = this.speakerList !== undefined ? this.speakerList : null;
        data["location"] = this.location !== undefined ? this.location : null;
        data["startDate"] = this.startDate ? new Date(this.startDate.toString()) : null;
        data["endDate"] = this.endDate ? new Date(this.endDate.toString()) : null;
        data["feedbackAllowed"] = this.feedbackAllowed !== undefined ? this.feedbackAllowed : null;
        data["averageRate"] = this.averageRate !== undefined ? this.averageRate : null;
        data["averageRateAnswer0"] = this.averageRateAnswer0 !== undefined ? this.averageRateAnswer0 : null;
        data["averageRateAnswer1"] = this.averageRateAnswer1 !== undefined ? this.averageRateAnswer1 : null;
        data["averageRateAnswer2"] = this.averageRateAnswer2 !== undefined ? this.averageRateAnswer2 : null;
        data["averageRateAnswer3"] = this.averageRateAnswer3 !== undefined ? this.averageRateAnswer3 : null;
        data["averageRateAnswer4"] = this.averageRateAnswer4 !== undefined ? this.averageRateAnswer4 : null;
        data["averageRateAnswer5"] = this.averageRateAnswer5 !== undefined ? this.averageRateAnswer5 : null;
        data["averageRateAnswer6"] = this.averageRateAnswer6 !== undefined ? this.averageRateAnswer6 : null;
        data["averageRateAnswer7"] = this.averageRateAnswer7 !== undefined ? this.averageRateAnswer7 : null;
        data["averageRateAnswer8"] = this.averageRateAnswer8 !== undefined ? this.averageRateAnswer8 : null;
        data["averageRateAnswer9"] = this.averageRateAnswer9 !== undefined ? this.averageRateAnswer9 : null;
        data["quesstionTitle0"] = this.quesstionTitle0 !== undefined ? this.quesstionTitle0 : null;
        data["maxRateQuestion0"] = this.maxRateQuestion0 !== undefined ? this.maxRateQuestion0 : null;
        data["quesstionTitle1"] = this.quesstionTitle1 !== undefined ? this.quesstionTitle1 : null;
        data["maxRateQuestion1"] = this.maxRateQuestion1 !== undefined ? this.maxRateQuestion1 : null;
        data["quesstionTitle2"] = this.quesstionTitle2 !== undefined ? this.quesstionTitle2 : null;
        data["maxRateQuestion2"] = this.maxRateQuestion2 !== undefined ? this.maxRateQuestion2 : null;
        data["quesstionTitle3"] = this.quesstionTitle3 !== undefined ? this.quesstionTitle3 : null;
        data["maxRateQuestion3"] = this.maxRateQuestion3 !== undefined ? this.maxRateQuestion3 : null;
        data["quesstionTitle4"] = this.quesstionTitle4 !== undefined ? this.quesstionTitle4 : null;
        data["maxRateQuestion4"] = this.maxRateQuestion4 !== undefined ? this.maxRateQuestion4 : null;
        data["quesstionTitle5"] = this.quesstionTitle5 !== undefined ? this.quesstionTitle5 : null;
        data["maxRateQuestion5"] = this.maxRateQuestion5 !== undefined ? this.maxRateQuestion5 : null;
        data["quesstionTitle6"] = this.quesstionTitle6 !== undefined ? this.quesstionTitle6 : null;
        data["maxRateQuestion6"] = this.maxRateQuestion6 !== undefined ? this.maxRateQuestion6 : null;
        data["quesstionTitle7"] = this.quesstionTitle7 !== undefined ? this.quesstionTitle7 : null;
        data["maxRateQuestion7"] = this.maxRateQuestion7 !== undefined ? this.maxRateQuestion7 : null;
        data["quesstionTitle8"] = this.quesstionTitle8 !== undefined ? this.quesstionTitle8 : null;
        data["maxRateQuestion8"] = this.maxRateQuestion8 !== undefined ? this.maxRateQuestion8 : null;
        data["quesstionTitle9"] = this.quesstionTitle9 !== undefined ? this.quesstionTitle9 : null;
        data["maxRateQuestion9"] = this.maxRateQuestion9 !== undefined ? this.maxRateQuestion9 : null;
        if (this.feedbacks && this.feedbacks.constructor === Array) {
            data["feedbacks"] = [];
            for (let item of this.feedbacks)
                data["feedbacks"].push(new FeedbackReportModel(item));
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class Event {
    id: number;
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    title: string;
    description: string;
    key: string;
    link: string;
    feedbackAllowed: boolean;
    feedbackDefinitionId: number;
    feedbackDefinition: FeedbackDefinition;
    startDate: Date;
    endDate: Date;
    location: string;
    organization: string;
    activeFromDate: Date;
    activeTillDate: Date;
    tags: string[];
    tagList: string;
    feedbacks: Feedback[];
    sessions: Session[];

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.title = data["title"] !== undefined ? data["title"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.link = data["link"] !== undefined ? data["link"] : null;
            this.feedbackAllowed = data["feedbackAllowed"] !== undefined ? data["feedbackAllowed"] : null;
            this.feedbackDefinitionId = data["feedbackDefinitionId"] !== undefined ? data["feedbackDefinitionId"] : null;
            this.feedbackDefinition = data["feedbackDefinition"] ? new FeedbackDefinition(data["feedbackDefinition"]) : null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : null;
            this.location = data["location"] !== undefined ? data["location"] : null;
            this.organization = data["organization"] !== undefined ? data["organization"] : null;
            this.activeFromDate = data["activeFromDate"] ? new Date(data["activeFromDate"].toString()) : null;
            this.activeTillDate = data["activeTillDate"] ? new Date(data["activeTillDate"].toString()) : null;
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(item);
            }
            this.tagList = data["tagList"] !== undefined ? data["tagList"] : null;
            if (data["feedbacks"] && data["feedbacks"].constructor === Array) {
                this.feedbacks = [];
                for (let item of data["feedbacks"])
                    this.feedbacks.push(new Feedback(item));
            }
            if (data["sessions"] && data["sessions"].constructor === Array) {
                this.sessions = [];
                for (let item of data["sessions"])
                    this.sessions.push(new Session(item));
            }
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["key"] = this.key !== undefined ? this.key : null;
        data["link"] = this.link !== undefined ? this.link : null;
        data["feedbackAllowed"] = this.feedbackAllowed !== undefined ? this.feedbackAllowed : null;
        data["feedbackDefinitionId"] = this.feedbackDefinitionId !== undefined ? this.feedbackDefinitionId : null;
        data["feedbackDefinition"] = this.feedbackDefinition ? new FeedbackDefinition(this.feedbackDefinition) : null;
        data["startDate"] = this.startDate ? new Date(this.startDate.toString()) : null;
        data["endDate"] = this.endDate ? new Date(this.endDate.toString()) : null;
        data["location"] = this.location !== undefined ? this.location : null;
        data["organization"] = this.organization !== undefined ? this.organization : null;
        data["activeFromDate"] = this.activeFromDate ? new Date(this.activeFromDate.toString()) : null;
        data["activeTillDate"] = this.activeTillDate ? new Date(this.activeTillDate.toString()) : null;
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["tagList"] = this.tagList !== undefined ? this.tagList : null;
        if (this.feedbacks && this.feedbacks.constructor === Array) {
            data["feedbacks"] = [];
            for (let item of this.feedbacks)
                data["feedbacks"].push(new Feedback(item));
        }
        if (this.sessions && this.sessions.constructor === Array) {
            data["sessions"] = [];
            for (let item of this.sessions)
                data["sessions"].push(new Session(item));
        }
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class FeedbackDefinition {
    id: number;
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    title: string;
    description: string;
    active0: boolean;
    order0: number;
    weight0: number;
    questionType0: questionType0AsInteger;
    title0: string;
    description0: string;
    help0: string;
    required0: boolean;
    active1: boolean;
    order1: number;
    weight1: number;
    questionType1: questionType1AsInteger;
    title1: string;
    description1: string;
    help1: string;
    required1: boolean;
    active2: boolean;
    order2: number;
    weight2: number;
    questionType2: questionType2AsInteger;
    title2: string;
    description2: string;
    help2: string;
    required2: boolean;
    active3: boolean;
    order3: number;
    weight3: number;
    questionType3: questionType3AsInteger;
    title3: string;
    description3: string;
    help3: string;
    required3: boolean;
    active4: boolean;
    order4: number;
    weight4: number;
    questionType4: questionType4AsInteger;
    title4: string;
    description4: string;
    help4: string;
    required4: boolean;
    active5: boolean;
    order5: number;
    weight5: number;
    questionType5: questionType5AsInteger;
    title5: string;
    description5: string;
    help5: string;
    required5: boolean;
    active6: boolean;
    order6: number;
    weight6: number;
    questionType6: questionType6AsInteger;
    title6: string;
    description6: string;
    help6: string;
    required6: boolean;
    active7: boolean;
    order7: number;
    weight7: number;
    questionType7: questionType7AsInteger;
    title7: string;
    description7: string;
    help7: string;
    required7: boolean;
    active8: boolean;
    order8: number;
    weight8: number;
    questionType8: questionType8AsInteger;
    title8: string;
    description8: string;
    help8: string;
    required8: boolean;
    active9: boolean;
    order9: number;
    weight9: number;
    questionType9: questionType9AsInteger;
    title9: string;
    description9: string;
    help9: string;
    required9: boolean;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.title = data["title"] !== undefined ? data["title"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.active0 = data["active0"] !== undefined ? data["active0"] : null;
            this.order0 = data["order0"] !== undefined ? data["order0"] : null;
            this.weight0 = data["weight0"] !== undefined ? data["weight0"] : null;
            this.questionType0 = data["questionType0"] !== undefined ? data["questionType0"] : null;
            this.title0 = data["title0"] !== undefined ? data["title0"] : null;
            this.description0 = data["description0"] !== undefined ? data["description0"] : null;
            this.help0 = data["help0"] !== undefined ? data["help0"] : null;
            this.required0 = data["required0"] !== undefined ? data["required0"] : null;
            this.active1 = data["active1"] !== undefined ? data["active1"] : null;
            this.order1 = data["order1"] !== undefined ? data["order1"] : null;
            this.weight1 = data["weight1"] !== undefined ? data["weight1"] : null;
            this.questionType1 = data["questionType1"] !== undefined ? data["questionType1"] : null;
            this.title1 = data["title1"] !== undefined ? data["title1"] : null;
            this.description1 = data["description1"] !== undefined ? data["description1"] : null;
            this.help1 = data["help1"] !== undefined ? data["help1"] : null;
            this.required1 = data["required1"] !== undefined ? data["required1"] : null;
            this.active2 = data["active2"] !== undefined ? data["active2"] : null;
            this.order2 = data["order2"] !== undefined ? data["order2"] : null;
            this.weight2 = data["weight2"] !== undefined ? data["weight2"] : null;
            this.questionType2 = data["questionType2"] !== undefined ? data["questionType2"] : null;
            this.title2 = data["title2"] !== undefined ? data["title2"] : null;
            this.description2 = data["description2"] !== undefined ? data["description2"] : null;
            this.help2 = data["help2"] !== undefined ? data["help2"] : null;
            this.required2 = data["required2"] !== undefined ? data["required2"] : null;
            this.active3 = data["active3"] !== undefined ? data["active3"] : null;
            this.order3 = data["order3"] !== undefined ? data["order3"] : null;
            this.weight3 = data["weight3"] !== undefined ? data["weight3"] : null;
            this.questionType3 = data["questionType3"] !== undefined ? data["questionType3"] : null;
            this.title3 = data["title3"] !== undefined ? data["title3"] : null;
            this.description3 = data["description3"] !== undefined ? data["description3"] : null;
            this.help3 = data["help3"] !== undefined ? data["help3"] : null;
            this.required3 = data["required3"] !== undefined ? data["required3"] : null;
            this.active4 = data["active4"] !== undefined ? data["active4"] : null;
            this.order4 = data["order4"] !== undefined ? data["order4"] : null;
            this.weight4 = data["weight4"] !== undefined ? data["weight4"] : null;
            this.questionType4 = data["questionType4"] !== undefined ? data["questionType4"] : null;
            this.title4 = data["title4"] !== undefined ? data["title4"] : null;
            this.description4 = data["description4"] !== undefined ? data["description4"] : null;
            this.help4 = data["help4"] !== undefined ? data["help4"] : null;
            this.required4 = data["required4"] !== undefined ? data["required4"] : null;
            this.active5 = data["active5"] !== undefined ? data["active5"] : null;
            this.order5 = data["order5"] !== undefined ? data["order5"] : null;
            this.weight5 = data["weight5"] !== undefined ? data["weight5"] : null;
            this.questionType5 = data["questionType5"] !== undefined ? data["questionType5"] : null;
            this.title5 = data["title5"] !== undefined ? data["title5"] : null;
            this.description5 = data["description5"] !== undefined ? data["description5"] : null;
            this.help5 = data["help5"] !== undefined ? data["help5"] : null;
            this.required5 = data["required5"] !== undefined ? data["required5"] : null;
            this.active6 = data["active6"] !== undefined ? data["active6"] : null;
            this.order6 = data["order6"] !== undefined ? data["order6"] : null;
            this.weight6 = data["weight6"] !== undefined ? data["weight6"] : null;
            this.questionType6 = data["questionType6"] !== undefined ? data["questionType6"] : null;
            this.title6 = data["title6"] !== undefined ? data["title6"] : null;
            this.description6 = data["description6"] !== undefined ? data["description6"] : null;
            this.help6 = data["help6"] !== undefined ? data["help6"] : null;
            this.required6 = data["required6"] !== undefined ? data["required6"] : null;
            this.active7 = data["active7"] !== undefined ? data["active7"] : null;
            this.order7 = data["order7"] !== undefined ? data["order7"] : null;
            this.weight7 = data["weight7"] !== undefined ? data["weight7"] : null;
            this.questionType7 = data["questionType7"] !== undefined ? data["questionType7"] : null;
            this.title7 = data["title7"] !== undefined ? data["title7"] : null;
            this.description7 = data["description7"] !== undefined ? data["description7"] : null;
            this.help7 = data["help7"] !== undefined ? data["help7"] : null;
            this.required7 = data["required7"] !== undefined ? data["required7"] : null;
            this.active8 = data["active8"] !== undefined ? data["active8"] : null;
            this.order8 = data["order8"] !== undefined ? data["order8"] : null;
            this.weight8 = data["weight8"] !== undefined ? data["weight8"] : null;
            this.questionType8 = data["questionType8"] !== undefined ? data["questionType8"] : null;
            this.title8 = data["title8"] !== undefined ? data["title8"] : null;
            this.description8 = data["description8"] !== undefined ? data["description8"] : null;
            this.help8 = data["help8"] !== undefined ? data["help8"] : null;
            this.required8 = data["required8"] !== undefined ? data["required8"] : null;
            this.active9 = data["active9"] !== undefined ? data["active9"] : null;
            this.order9 = data["order9"] !== undefined ? data["order9"] : null;
            this.weight9 = data["weight9"] !== undefined ? data["weight9"] : null;
            this.questionType9 = data["questionType9"] !== undefined ? data["questionType9"] : null;
            this.title9 = data["title9"] !== undefined ? data["title9"] : null;
            this.description9 = data["description9"] !== undefined ? data["description9"] : null;
            this.help9 = data["help9"] !== undefined ? data["help9"] : null;
            this.required9 = data["required9"] !== undefined ? data["required9"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["active0"] = this.active0 !== undefined ? this.active0 : null;
        data["order0"] = this.order0 !== undefined ? this.order0 : null;
        data["weight0"] = this.weight0 !== undefined ? this.weight0 : null;
        data["questionType0"] = this.questionType0 !== undefined ? this.questionType0 : null;
        data["title0"] = this.title0 !== undefined ? this.title0 : null;
        data["description0"] = this.description0 !== undefined ? this.description0 : null;
        data["help0"] = this.help0 !== undefined ? this.help0 : null;
        data["required0"] = this.required0 !== undefined ? this.required0 : null;
        data["active1"] = this.active1 !== undefined ? this.active1 : null;
        data["order1"] = this.order1 !== undefined ? this.order1 : null;
        data["weight1"] = this.weight1 !== undefined ? this.weight1 : null;
        data["questionType1"] = this.questionType1 !== undefined ? this.questionType1 : null;
        data["title1"] = this.title1 !== undefined ? this.title1 : null;
        data["description1"] = this.description1 !== undefined ? this.description1 : null;
        data["help1"] = this.help1 !== undefined ? this.help1 : null;
        data["required1"] = this.required1 !== undefined ? this.required1 : null;
        data["active2"] = this.active2 !== undefined ? this.active2 : null;
        data["order2"] = this.order2 !== undefined ? this.order2 : null;
        data["weight2"] = this.weight2 !== undefined ? this.weight2 : null;
        data["questionType2"] = this.questionType2 !== undefined ? this.questionType2 : null;
        data["title2"] = this.title2 !== undefined ? this.title2 : null;
        data["description2"] = this.description2 !== undefined ? this.description2 : null;
        data["help2"] = this.help2 !== undefined ? this.help2 : null;
        data["required2"] = this.required2 !== undefined ? this.required2 : null;
        data["active3"] = this.active3 !== undefined ? this.active3 : null;
        data["order3"] = this.order3 !== undefined ? this.order3 : null;
        data["weight3"] = this.weight3 !== undefined ? this.weight3 : null;
        data["questionType3"] = this.questionType3 !== undefined ? this.questionType3 : null;
        data["title3"] = this.title3 !== undefined ? this.title3 : null;
        data["description3"] = this.description3 !== undefined ? this.description3 : null;
        data["help3"] = this.help3 !== undefined ? this.help3 : null;
        data["required3"] = this.required3 !== undefined ? this.required3 : null;
        data["active4"] = this.active4 !== undefined ? this.active4 : null;
        data["order4"] = this.order4 !== undefined ? this.order4 : null;
        data["weight4"] = this.weight4 !== undefined ? this.weight4 : null;
        data["questionType4"] = this.questionType4 !== undefined ? this.questionType4 : null;
        data["title4"] = this.title4 !== undefined ? this.title4 : null;
        data["description4"] = this.description4 !== undefined ? this.description4 : null;
        data["help4"] = this.help4 !== undefined ? this.help4 : null;
        data["required4"] = this.required4 !== undefined ? this.required4 : null;
        data["active5"] = this.active5 !== undefined ? this.active5 : null;
        data["order5"] = this.order5 !== undefined ? this.order5 : null;
        data["weight5"] = this.weight5 !== undefined ? this.weight5 : null;
        data["questionType5"] = this.questionType5 !== undefined ? this.questionType5 : null;
        data["title5"] = this.title5 !== undefined ? this.title5 : null;
        data["description5"] = this.description5 !== undefined ? this.description5 : null;
        data["help5"] = this.help5 !== undefined ? this.help5 : null;
        data["required5"] = this.required5 !== undefined ? this.required5 : null;
        data["active6"] = this.active6 !== undefined ? this.active6 : null;
        data["order6"] = this.order6 !== undefined ? this.order6 : null;
        data["weight6"] = this.weight6 !== undefined ? this.weight6 : null;
        data["questionType6"] = this.questionType6 !== undefined ? this.questionType6 : null;
        data["title6"] = this.title6 !== undefined ? this.title6 : null;
        data["description6"] = this.description6 !== undefined ? this.description6 : null;
        data["help6"] = this.help6 !== undefined ? this.help6 : null;
        data["required6"] = this.required6 !== undefined ? this.required6 : null;
        data["active7"] = this.active7 !== undefined ? this.active7 : null;
        data["order7"] = this.order7 !== undefined ? this.order7 : null;
        data["weight7"] = this.weight7 !== undefined ? this.weight7 : null;
        data["questionType7"] = this.questionType7 !== undefined ? this.questionType7 : null;
        data["title7"] = this.title7 !== undefined ? this.title7 : null;
        data["description7"] = this.description7 !== undefined ? this.description7 : null;
        data["help7"] = this.help7 !== undefined ? this.help7 : null;
        data["required7"] = this.required7 !== undefined ? this.required7 : null;
        data["active8"] = this.active8 !== undefined ? this.active8 : null;
        data["order8"] = this.order8 !== undefined ? this.order8 : null;
        data["weight8"] = this.weight8 !== undefined ? this.weight8 : null;
        data["questionType8"] = this.questionType8 !== undefined ? this.questionType8 : null;
        data["title8"] = this.title8 !== undefined ? this.title8 : null;
        data["description8"] = this.description8 !== undefined ? this.description8 : null;
        data["help8"] = this.help8 !== undefined ? this.help8 : null;
        data["required8"] = this.required8 !== undefined ? this.required8 : null;
        data["active9"] = this.active9 !== undefined ? this.active9 : null;
        data["order9"] = this.order9 !== undefined ? this.order9 : null;
        data["weight9"] = this.weight9 !== undefined ? this.weight9 : null;
        data["questionType9"] = this.questionType9 !== undefined ? this.questionType9 : null;
        data["title9"] = this.title9 !== undefined ? this.title9 : null;
        data["description9"] = this.description9 !== undefined ? this.description9 : null;
        data["help9"] = this.help9 !== undefined ? this.help9 : null;
        data["required9"] = this.required9 !== undefined ? this.required9 : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class Feedback {
    id: number;
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    userId: string;
    feedbackDefinitionId: number;
    feedbackDefinition: FeedbackDefinition;
    sessionId: number;
    eventId: number;
    averageRate: string;
    answer0: string;
    answer1: string;
    answer2: string;
    answer3: string;
    answer4: string;
    answer5: string;
    answer6: string;
    answer7: string;
    answer8: string;
    answer9: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.feedbackDefinitionId = data["feedbackDefinitionId"] !== undefined ? data["feedbackDefinitionId"] : null;
            this.feedbackDefinition = data["feedbackDefinition"] ? new FeedbackDefinition(data["feedbackDefinition"]) : null;
            this.sessionId = data["sessionId"] !== undefined ? data["sessionId"] : null;
            this.eventId = data["eventId"] !== undefined ? data["eventId"] : null;
            this.averageRate = data["averageRate"] !== undefined ? data["averageRate"] : null;
            this.answer0 = data["answer0"] !== undefined ? data["answer0"] : null;
            this.answer1 = data["answer1"] !== undefined ? data["answer1"] : null;
            this.answer2 = data["answer2"] !== undefined ? data["answer2"] : null;
            this.answer3 = data["answer3"] !== undefined ? data["answer3"] : null;
            this.answer4 = data["answer4"] !== undefined ? data["answer4"] : null;
            this.answer5 = data["answer5"] !== undefined ? data["answer5"] : null;
            this.answer6 = data["answer6"] !== undefined ? data["answer6"] : null;
            this.answer7 = data["answer7"] !== undefined ? data["answer7"] : null;
            this.answer8 = data["answer8"] !== undefined ? data["answer8"] : null;
            this.answer9 = data["answer9"] !== undefined ? data["answer9"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["feedbackDefinitionId"] = this.feedbackDefinitionId !== undefined ? this.feedbackDefinitionId : null;
        data["feedbackDefinition"] = this.feedbackDefinition ? new FeedbackDefinition(this.feedbackDefinition) : null;
        data["sessionId"] = this.sessionId !== undefined ? this.sessionId : null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : null;
        data["averageRate"] = this.averageRate !== undefined ? this.averageRate : null;
        data["answer0"] = this.answer0 !== undefined ? this.answer0 : null;
        data["answer1"] = this.answer1 !== undefined ? this.answer1 : null;
        data["answer2"] = this.answer2 !== undefined ? this.answer2 : null;
        data["answer3"] = this.answer3 !== undefined ? this.answer3 : null;
        data["answer4"] = this.answer4 !== undefined ? this.answer4 : null;
        data["answer5"] = this.answer5 !== undefined ? this.answer5 : null;
        data["answer6"] = this.answer6 !== undefined ? this.answer6 : null;
        data["answer7"] = this.answer7 !== undefined ? this.answer7 : null;
        data["answer8"] = this.answer8 !== undefined ? this.answer8 : null;
        data["answer9"] = this.answer9 !== undefined ? this.answer9 : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class Session {
    id: number;
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    title: string;
    description: string;
    startDate: Date;
    endDate: Date;
    location: string;
    level: string;
    type: string;
    track: string;
    key: string;
    link: string;
    activeFromDate: Date;
    activeTillDate: Date;
    feedbackAllowed: boolean;
    feedbackDefinitionId: number;
    feedbackDefinition: FeedbackDefinition;
    eventId: number;
    feedbacks: Feedback[];
    speakers: string[];
    speakerList: string;
    tags: string[];
    tagList: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.title = data["title"] !== undefined ? data["title"] : null;
            this.description = data["description"] !== undefined ? data["description"] : null;
            this.startDate = data["startDate"] ? new Date(data["startDate"].toString()) : null;
            this.endDate = data["endDate"] ? new Date(data["endDate"].toString()) : null;
            this.location = data["location"] !== undefined ? data["location"] : null;
            this.level = data["level"] !== undefined ? data["level"] : null;
            this.type = data["type"] !== undefined ? data["type"] : null;
            this.track = data["track"] !== undefined ? data["track"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.link = data["link"] !== undefined ? data["link"] : null;
            this.activeFromDate = data["activeFromDate"] ? new Date(data["activeFromDate"].toString()) : null;
            this.activeTillDate = data["activeTillDate"] ? new Date(data["activeTillDate"].toString()) : null;
            this.feedbackAllowed = data["feedbackAllowed"] !== undefined ? data["feedbackAllowed"] : null;
            this.feedbackDefinitionId = data["feedbackDefinitionId"] !== undefined ? data["feedbackDefinitionId"] : null;
            this.feedbackDefinition = data["feedbackDefinition"] ? new FeedbackDefinition(data["feedbackDefinition"]) : null;
            this.eventId = data["eventId"] !== undefined ? data["eventId"] : null;
            if (data["feedbacks"] && data["feedbacks"].constructor === Array) {
                this.feedbacks = [];
                for (let item of data["feedbacks"])
                    this.feedbacks.push(new Feedback(item));
            }
            if (data["speakers"] && data["speakers"].constructor === Array) {
                this.speakers = [];
                for (let item of data["speakers"])
                    this.speakers.push(item);
            }
            this.speakerList = data["speakerList"] !== undefined ? data["speakerList"] : null;
            if (data["tags"] && data["tags"].constructor === Array) {
                this.tags = [];
                for (let item of data["tags"])
                    this.tags.push(item);
            }
            this.tagList = data["tagList"] !== undefined ? data["tagList"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["title"] = this.title !== undefined ? this.title : null;
        data["description"] = this.description !== undefined ? this.description : null;
        data["startDate"] = this.startDate ? new Date(this.startDate.toString()) : null;
        data["endDate"] = this.endDate ? new Date(this.endDate.toString()) : null;
        data["location"] = this.location !== undefined ? this.location : null;
        data["level"] = this.level !== undefined ? this.level : null;
        data["type"] = this.type !== undefined ? this.type : null;
        data["track"] = this.track !== undefined ? this.track : null;
        data["key"] = this.key !== undefined ? this.key : null;
        data["link"] = this.link !== undefined ? this.link : null;
        data["activeFromDate"] = this.activeFromDate ? new Date(this.activeFromDate.toString()) : null;
        data["activeTillDate"] = this.activeTillDate ? new Date(this.activeTillDate.toString()) : null;
        data["feedbackAllowed"] = this.feedbackAllowed !== undefined ? this.feedbackAllowed : null;
        data["feedbackDefinitionId"] = this.feedbackDefinitionId !== undefined ? this.feedbackDefinitionId : null;
        data["feedbackDefinition"] = this.feedbackDefinition ? new FeedbackDefinition(this.feedbackDefinition) : null;
        data["eventId"] = this.eventId !== undefined ? this.eventId : null;
        if (this.feedbacks && this.feedbacks.constructor === Array) {
            data["feedbacks"] = [];
            for (let item of this.feedbacks)
                data["feedbacks"].push(new Feedback(item));
        }
        if (this.speakers && this.speakers.constructor === Array) {
            data["speakers"] = [];
            for (let item of this.speakers)
                data["speakers"].push(item);
        }
        data["speakerList"] = this.speakerList !== undefined ? this.speakerList : null;
        if (this.tags && this.tags.constructor === Array) {
            data["tags"] = [];
            for (let item of this.tags)
                data["tags"].push(item);
        }
        data["tagList"] = this.tagList !== undefined ? this.tagList : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class Object {

    constructor(data?: any) {
        if (data !== undefined) {
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class ResourceText {
    id: number;
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    language: string;
    key: string;
    group: string;
    value: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.language = data["language"] !== undefined ? data["language"] : null;
            this.key = data["key"] !== undefined ? data["key"] : null;
            this.group = data["group"] !== undefined ? data["group"] : null;
            this.value = data["value"] !== undefined ? data["value"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["language"] = this.language !== undefined ? this.language : null;
        data["key"] = this.key !== undefined ? this.key : null;
        data["group"] = this.group !== undefined ? this.group : null;
        data["value"] = this.value !== undefined ? this.value : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class RoleAdminBindingModel {
    name: string;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.name = data["name"] !== undefined ? data["name"] : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["name"] = this.name !== undefined ? this.name : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class LoginBindingModel {
    userName: string;
    password: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["password"] = this.password !== undefined ? this.password : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class User {
    active: boolean;
    createDate: Date;
    createdBy: string;
    modifyDate: Date;
    modifiedBy: string;
    deleted: boolean;
    deleteDate: Date;
    deletedBy: string;
    organization: string;
    activeFromDate: Date;
    activeTillDate: Date;
    email: string;
    emailConfirmed: boolean;
    passwordHash: string;
    securityStamp: string;
    phoneNumber: string;
    phoneNumberConfirmed: boolean;
    twoFactorEnabled: boolean;
    lockoutEndDateUtc: Date;
    lockoutEnabled: boolean;
    accessFailedCount: number;
    roles: UserRole[];
    claims: UserClaim[];
    logins: UserLogin[];
    id: string;
    userName: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.createDate = data["createDate"] ? new Date(data["createDate"].toString()) : null;
            this.createdBy = data["createdBy"] !== undefined ? data["createdBy"] : null;
            this.modifyDate = data["modifyDate"] ? new Date(data["modifyDate"].toString()) : null;
            this.modifiedBy = data["modifiedBy"] !== undefined ? data["modifiedBy"] : null;
            this.deleted = data["deleted"] !== undefined ? data["deleted"] : null;
            this.deleteDate = data["deleteDate"] ? new Date(data["deleteDate"].toString()) : null;
            this.deletedBy = data["deletedBy"] !== undefined ? data["deletedBy"] : null;
            this.organization = data["organization"] !== undefined ? data["organization"] : null;
            this.activeFromDate = data["activeFromDate"] ? new Date(data["activeFromDate"].toString()) : null;
            this.activeTillDate = data["activeTillDate"] ? new Date(data["activeTillDate"].toString()) : null;
            this.email = data["email"] !== undefined ? data["email"] : null;
            this.emailConfirmed = data["emailConfirmed"] !== undefined ? data["emailConfirmed"] : null;
            this.passwordHash = data["passwordHash"] !== undefined ? data["passwordHash"] : null;
            this.securityStamp = data["securityStamp"] !== undefined ? data["securityStamp"] : null;
            this.phoneNumber = data["phoneNumber"] !== undefined ? data["phoneNumber"] : null;
            this.phoneNumberConfirmed = data["phoneNumberConfirmed"] !== undefined ? data["phoneNumberConfirmed"] : null;
            this.twoFactorEnabled = data["twoFactorEnabled"] !== undefined ? data["twoFactorEnabled"] : null;
            this.lockoutEndDateUtc = data["lockoutEndDateUtc"] ? new Date(data["lockoutEndDateUtc"].toString()) : null;
            this.lockoutEnabled = data["lockoutEnabled"] !== undefined ? data["lockoutEnabled"] : null;
            this.accessFailedCount = data["accessFailedCount"] !== undefined ? data["accessFailedCount"] : null;
            if (data["roles"] && data["roles"].constructor === Array) {
                this.roles = [];
                for (let item of data["roles"])
                    this.roles.push(new UserRole(item));
            }
            if (data["claims"] && data["claims"].constructor === Array) {
                this.claims = [];
                for (let item of data["claims"])
                    this.claims.push(new UserClaim(item));
            }
            if (data["logins"] && data["logins"].constructor === Array) {
                this.logins = [];
                for (let item of data["logins"])
                    this.logins.push(new UserLogin(item));
            }
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["active"] = this.active !== undefined ? this.active : null;
        data["createDate"] = this.createDate ? new Date(this.createDate.toString()) : null;
        data["createdBy"] = this.createdBy !== undefined ? this.createdBy : null;
        data["modifyDate"] = this.modifyDate ? new Date(this.modifyDate.toString()) : null;
        data["modifiedBy"] = this.modifiedBy !== undefined ? this.modifiedBy : null;
        data["deleted"] = this.deleted !== undefined ? this.deleted : null;
        data["deleteDate"] = this.deleteDate ? new Date(this.deleteDate.toString()) : null;
        data["deletedBy"] = this.deletedBy !== undefined ? this.deletedBy : null;
        data["organization"] = this.organization !== undefined ? this.organization : null;
        data["activeFromDate"] = this.activeFromDate ? new Date(this.activeFromDate.toString()) : null;
        data["activeTillDate"] = this.activeTillDate ? new Date(this.activeTillDate.toString()) : null;
        data["email"] = this.email !== undefined ? this.email : null;
        data["emailConfirmed"] = this.emailConfirmed !== undefined ? this.emailConfirmed : null;
        data["passwordHash"] = this.passwordHash !== undefined ? this.passwordHash : null;
        data["securityStamp"] = this.securityStamp !== undefined ? this.securityStamp : null;
        data["phoneNumber"] = this.phoneNumber !== undefined ? this.phoneNumber : null;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed !== undefined ? this.phoneNumberConfirmed : null;
        data["twoFactorEnabled"] = this.twoFactorEnabled !== undefined ? this.twoFactorEnabled : null;
        data["lockoutEndDateUtc"] = this.lockoutEndDateUtc ? new Date(this.lockoutEndDateUtc.toString()) : null;
        data["lockoutEnabled"] = this.lockoutEnabled !== undefined ? this.lockoutEnabled : null;
        data["accessFailedCount"] = this.accessFailedCount !== undefined ? this.accessFailedCount : null;
        if (this.roles && this.roles.constructor === Array) {
            data["roles"] = [];
            for (let item of this.roles)
                data["roles"].push(new UserRole(item));
        }
        if (this.claims && this.claims.constructor === Array) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(new UserClaim(item));
        }
        if (this.logins && this.logins.constructor === Array) {
            data["logins"] = [];
            for (let item of this.logins)
                data["logins"].push(new UserLogin(item));
        }
        data["id"] = this.id !== undefined ? this.id : null;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class UserRole {
    userId: string;
    roleId: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.roleId = data["roleId"] !== undefined ? data["roleId"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["roleId"] = this.roleId !== undefined ? this.roleId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class UserClaim {
    id: number;
    userId: string;
    claimType: string;
    claimValue: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.id = data["id"] !== undefined ? data["id"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
            this.claimType = data["claimType"] !== undefined ? data["claimType"] : null;
            this.claimValue = data["claimValue"] !== undefined ? data["claimValue"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["id"] = this.id !== undefined ? this.id : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        data["claimType"] = this.claimType !== undefined ? this.claimType : null;
        data["claimValue"] = this.claimValue !== undefined ? this.claimValue : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class UserLogin {
    loginProvider: string;
    providerKey: string;
    userId: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.loginProvider = data["loginProvider"] !== undefined ? data["loginProvider"] : null;
            this.providerKey = data["providerKey"] !== undefined ? data["providerKey"] : null;
            this.userId = data["userId"] !== undefined ? data["userId"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["loginProvider"] = this.loginProvider !== undefined ? this.loginProvider : null;
        data["providerKey"] = this.providerKey !== undefined ? this.providerKey : null;
        data["userId"] = this.userId !== undefined ? this.userId : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export class UserAdminBindingModel {
    userName: string;
    organization: string;
    email: string;
    active: boolean;
    roles: string;
    password: string;
    activeFrom: Date;
    activeTill: Date;
    id: string;

    constructor(data?: any) {
        if (data !== undefined) {
            this.userName = data["userName"] !== undefined ? data["userName"] : null;
            this.organization = data["organization"] !== undefined ? data["organization"] : null;
            this.email = data["email"] !== undefined ? data["email"] : null;
            this.active = data["active"] !== undefined ? data["active"] : null;
            this.roles = data["roles"] !== undefined ? data["roles"] : null;
            this.password = data["password"] !== undefined ? data["password"] : null;
            this.activeFrom = data["activeFrom"] ? new Date(data["activeFrom"].toString()) : null;
            this.activeTill = data["activeTill"] ? new Date(data["activeTill"].toString()) : null;
            this.id = data["id"] !== undefined ? data["id"] : null;
        }
    }

    toJS(data?: any) {
        data = data === undefined ? {} : data;
        data["userName"] = this.userName !== undefined ? this.userName : null;
        data["organization"] = this.organization !== undefined ? this.organization : null;
        data["email"] = this.email !== undefined ? this.email : null;
        data["active"] = this.active !== undefined ? this.active : null;
        data["roles"] = this.roles !== undefined ? this.roles : null;
        data["password"] = this.password !== undefined ? this.password : null;
        data["activeFrom"] = this.activeFrom ? new Date(this.activeFrom.toString()) : null;
        data["activeTill"] = this.activeTill ? new Date(this.activeTill.toString()) : null;
        data["id"] = this.id !== undefined ? this.id : null;
        return data;
    }

    toJSON() {
        return JSON.stringify(this.toJS());
    }
}

export enum questionType0AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType1AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType2AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType3AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType4AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType5AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType6AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType7AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType8AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType9AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}