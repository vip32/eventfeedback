// Generated by CoffeeScript 1.6.3
'use strict';
var defaultSettings, each, fs, sysPath,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

sysPath = require('path');

fs = require('fs');

each = require('async-each');

defaultSettings = function(extname) {
  switch (extname) {
    case 'jade':
      return {
        regexp: /^\s*(?:include|extends)\s+(.+)/
      };
    case 'styl':
      return {
        regexp: /^\s*@import\s+['"]?([^'"]+)['"]?/,
        exclusion: 'nib'
      };
    case 'less':
      return {
        regexp: /^\s*@import\s+['"]([^'"]+)['"]/
      };
    case 'scss':
    case 'sass':
      return {
        regexp: /^\s*@import\s+['"]?([^'"]+)['"]?/,
        prefix: '_',
        exclusion: /^compass/,
        extensionsList: ['scss', 'sass']
      };
  }
};

module.exports = function(_arg) {
  var exclusion, extension, extensionsList, parseDeps, prefix, regexp, rootPath, _ref;
  _ref = _arg != null ? _arg : {}, rootPath = _ref.rootPath, extension = _ref.extension, regexp = _ref.regexp, prefix = _ref.prefix, exclusion = _ref.exclusion, extensionsList = _ref.extensionsList;
  parseDeps = function(data, path, depsList, callback) {
    var altExts, deps, parent, prefixed;
    if (path) {
      parent = sysPath.dirname(path);
    }
    deps = data.toString().split('\n').map(function(line) {
      return line.match(regexp);
    }).filter(function(match) {
      return (match != null ? match.length : void 0) > 0;
    }).map(function(match) {
      return match[1];
    }).filter(function(path) {
      return !!path && !(function() {
        switch (false) {
          case !(exclusion instanceof RegExp):
            return exclusion.test(path);
          case !(exclusion instanceof String):
            return exclusion === path;
          default:
            return false;
        }
      })();
    }).map(function(path) {
      if (extension && ("." + extension) !== sysPath.extname(path)) {
        return "" + path + "." + extension;
      } else {
        return path;
      }
    }).map(function(path) {
      if (path[0] === '/' || !parent) {
        return sysPath.join(rootPath, path.slice(1));
      } else {
        return sysPath.join(parent, path);
      }
    });
    if (prefix != null) {
      prefixed = [];
      deps.forEach(function(path) {
        var dir, file;
        dir = sysPath.dirname(path);
        file = sysPath.basename(path);
        if (0 !== file.indexOf(prefix)) {
          return prefixed.push(sysPath.join(dir, "" + prefix + file));
        }
      });
      deps = deps.concat(prefixed);
    }
    if (extensionsList.length) {
      altExts = [];
      deps.forEach(function(path) {
        var dir;
        dir = sysPath.dirname(path);
        return extensionsList.forEach(function(ext) {
          var base;
          if (("." + ext) !== sysPath.extname(path)) {
            base = sysPath.basename(path, "." + extension);
            return altExts.push(sysPath.join(dir, "" + base + "." + ext));
          }
        });
      });
      deps = deps.concat(altExts);
    }
    if (deps.length) {
      return each(deps, function(path, callback) {
        if (__indexOf.call(depsList, path) >= 0) {
          return callback();
        } else {
          depsList.push(path);
          return fs.readFile(path, {
            encoding: 'utf8'
          }, function(err, data) {
            if (err) {
              return callback();
            }
            return parseDeps(data, path, depsList, callback);
          });
        }
      }, callback);
    } else {
      return callback();
    }
  };
  return function(data, path, callback) {
    var def, depsList, run;
    depsList = [];
    if (extension == null) {
      extension = sysPath.extname(path).slice(1);
    }
    def = defaultSettings(extension);
    if (regexp == null) {
      regexp = def.regexp;
    }
    if (prefix == null) {
      prefix = def.prefix;
    }
    if (exclusion == null) {
      exclusion = def.exclusion;
    }
    if (extensionsList == null) {
      extensionsList = def.extensionsList || [];
    }
    run = function() {
      return parseDeps(data, path, depsList, function() {
        return callback(null, depsList);
      });
    };
    if (data != null) {
      return run();
    } else {
      return fs.readFile(path, {
        encoding: 'utf8'
      }, function(err, fileContents) {
        if (err) {
          return callback(err);
        }
        data = fileContents;
        return run();
      });
    }
  };
};
