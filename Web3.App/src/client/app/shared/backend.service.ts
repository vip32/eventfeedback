//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v2.41.5995.34157 (http://NSwag.org)
// </auto-generated>
//----------------------

import 'rxjs/Rx';
import {Observable} from 'rxjs/Observable';
import {Injectable, Inject, Optional, OpaqueToken} from '@angular/core';
import {Http, Headers, Response, RequestOptionsArgs} from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');
export const JSON_PARSE_REVIVER = new OpaqueToken('JSON_PARSE_REVIVER');

@Injectable()
export class BackendService {
    private http: Http = null;
    private baseUrl: string = undefined;
    private jsonParseReviver: (key: string, value: any) => any = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string,
        @Optional() @Inject(JSON_PARSE_REVIVER) jsonParseReviver?: (key: string, value: any) => any) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:6003";
        this.jsonParseReviver = jsonParseReviver;
    }

    /**
     * @return OK
     */
    eventReports_Get(eventId: number, filter: string): Observable<EventReportModel> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/report?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEventReports_Get(response);
        });
    }

    private processEventReports_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: EventReportModel = null;
            result200 = data === "" ? null : <EventReportModel>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Get(filter: string): Observable<Event[]> {
        var url = this.baseUrl + "/api/v1/events?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Get(response);
        });
    }

    private processEvents_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event[] = null;
            result200 = data === "" ? null : <Event[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Post(entity: Event): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events?";

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Post(response);
        });
    }

    private processEvents_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            result200 = data === "" ? null : <Event>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_GetById(id: number, filter: string): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_GetById(response);
        });
    }

    private processEvents_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            result200 = data === "" ? null : <Event>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Put(id: number, entity: Event): Observable<Event> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Put(response);
        });
    }

    private processEvents_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Event = null;
            result200 = data === "" ? null : <Event>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    events_Delete(id: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/events/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processEvents_Delete(response);
        });
    }

    private processEvents_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Get(filter: string): Observable<FeedbackDefinition[]> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Get(response);
        });
    }

    private processFeedbackDefinitions_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition[] = null;
            result200 = data === "" ? null : <FeedbackDefinition[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Post(entity: FeedbackDefinition): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions?";

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Post(response);
        });
    }

    private processFeedbackDefinitions_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            result200 = data === "" ? null : <FeedbackDefinition>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_GetById(id: number, filter: string): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_GetById(response);
        });
    }

    private processFeedbackDefinitions_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            result200 = data === "" ? null : <FeedbackDefinition>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Put(id: number, entity: FeedbackDefinition): Observable<FeedbackDefinition> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Put(response);
        });
    }

    private processFeedbackDefinitions_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: FeedbackDefinition = null;
            result200 = data === "" ? null : <FeedbackDefinition>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbackDefinitions_Delete(id: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/feedbackdefinitions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbackDefinitions_Delete(response);
        });
    }

    private processFeedbackDefinitions_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Get(): Observable<Feedback[]> {
        var url = this.baseUrl + "/api/v1/feedbacks?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Get(response);
        });
    }

    private processFeedbacks_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback[] = null;
            result200 = data === "" ? null : <Feedback[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Post(entity: Feedback): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks?";

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Post(response);
        });
    }

    private processFeedbacks_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            result200 = data === "" ? null : <Feedback>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_GetById(id: number): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_GetById(response);
        });
    }

    private processFeedbacks_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            result200 = data === "" ? null : <Feedback>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Put(id: number, entity: Feedback): Observable<Feedback> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Put(response);
        });
    }

    private processFeedbacks_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Feedback = null;
            result200 = data === "" ? null : <Feedback>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    feedbacks_Delete(id: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/feedbacks/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processFeedbacks_Delete(response);
        });
    }

    private processFeedbacks_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_ApiInfo(): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/apiinfo?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_ApiInfo(response);
        });
    }

    private processLookup_ApiInfo(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_Roles(): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/roles?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_Roles(response);
        });
    }

    private processLookup_Roles(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_Levels(): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/levels?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_Levels(response);
        });
    }

    private processLookup_Levels(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_LevelsForEvent(eventId: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/levels/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_LevelsForEvent(response);
        });
    }

    private processLookup_LevelsForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_TagsForEvent(eventId: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/tags/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_TagsForEvent(response);
        });
    }

    private processLookup_TagsForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_SpeakersForEvent(eventId: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/speakers/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_SpeakersForEvent(response);
        });
    }

    private processLookup_SpeakersForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    lookup_TracksForEvent(eventId: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/lookup/tracks/{eventId}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processLookup_TracksForEvent(response);
        });
    }

    private processLookup_TracksForEvent(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Get(filter: string, language: string): Observable<ResourceText[]> {
        var url = this.baseUrl + "/api/v1/resources?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";
        if (language !== undefined && language !== null)
            url += "language=" + encodeURIComponent("" + language) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Get(response);
        });
    }

    private processResourceTexts_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText[] = null;
            result200 = data === "" ? null : <ResourceText[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Post(entity: ResourceText): Observable<ResourceText> {
        var url = this.baseUrl + "/api/v1/resources?";

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Post(response);
        });
    }

    private processResourceTexts_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText = null;
            result200 = data === "" ? null : <ResourceText>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Put(id: number, entity: ResourceText): Observable<ResourceText> {
        var url = this.baseUrl + "/api/v1/resources/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Put(response);
        });
    }

    private processResourceTexts_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: ResourceText = null;
            result200 = data === "" ? null : <ResourceText>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    resourceTexts_Delete(id: number): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/resources/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processResourceTexts_Delete(response);
        });
    }

    private processResourceTexts_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    roles_Get(): Observable<RoleAdminBindingModel[]> {
        var url = this.baseUrl + "/api/v1/admin/roles?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processRoles_Get(response);
        });
    }

    private processRoles_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: RoleAdminBindingModel[] = null;
            result200 = data === "" ? null : <RoleAdminBindingModel[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Get(eventId: number, filter: string): Observable<Session[]> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Get(response);
        });
    }

    private processSessions_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session[] = null;
            result200 = data === "" ? null : <Session[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Post(entity: Session, eventId: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Post(response);
        });
    }

    private processSessions_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            result200 = data === "" ? null : <Session>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_GetById(eventId: number, id: number, filter: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_GetById(response);
        });
    }

    private processSessions_GetById(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            result200 = data === "" ? null : <Session>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Put(id: number, entity: Session, eventId: string): Observable<Session> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Put(response);
        });
    }

    private processSessions_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: Session = null;
            result200 = data === "" ? null : <Session>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    sessions_Delete(id: number, eventId: string): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/events/{eventId}/sessions/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));
        if (eventId === undefined || eventId === null)
            throw new Error("The parameter 'eventId' must be defined.");
        url = url.replace("{eventId}", encodeURIComponent("" + eventId));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processSessions_Delete(response);
        });
    }

    private processSessions_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    user_Token(login: LoginBindingModel): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/user/token?";

        var content = JSON.stringify(login);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUser_Token(response);
        });
    }

    private processUser_Token(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    user_Profile(): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/user/profile?";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUser_Profile(response);
        });
    }

    private processUser_Profile(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Get(filter: string): Observable<User[]> {
        var url = this.baseUrl + "/api/v1/admin/users?";

        if (filter !== undefined && filter !== null)
            url += "filter=" + encodeURIComponent("" + filter) + "&";

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Get(response);
        });
    }

    private processUsers_Get(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User[] = null;
            result200 = data === "" ? null : <User[]>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Post(entity: UserAdminBindingModel): Observable<User> {
        var url = this.baseUrl + "/api/v1/admin/users?";

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Post(response);
        });
    }

    private processUsers_Post(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User = null;
            result200 = data === "" ? null : <User>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Put(id: string, entity: UserAdminBindingModel): Observable<User> {
        var url = this.baseUrl + "/api/v1/admin/users/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = JSON.stringify(entity);

        return this.http.request(url, {
            body: content,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Put(response);
        });
    }

    private processUsers_Put(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: User = null;
            result200 = data === "" ? null : <User>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }

    /**
     * @return OK
     */
    users_Delete(id: string): Observable<{ [key: string] : any; }> {
        var url = this.baseUrl + "/api/v1/admin/users/{id}?";

        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url = url.replace("{id}", encodeURIComponent("" + id));

        var content = "";

        return this.http.request(url, {
            body: content,
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json; charset=UTF-8"
            })
        }).map((response) => {
            return this.processUsers_Delete(response);
        });
    }

    private processUsers_Delete(response: Response) {
        var data = response.text();
        var status = response.status.toString();

        if (status === "200") {
            var result200: { [key: string] : any; } = null;
            result200 = data === "" ? null : <{ [key: string] : any; }>JSON.parse(data, this.jsonParseReviver);
            return result200;
        }
        else
        {
            throw "error_no_callback_for_the_received_http_status";
        }
    }
}

export interface EventReportModel {
    id?: number;
    title?: string;
    startDate?: Date;
    endDate?: Date;
    location?: string;
    averageRate?: string;
    quesstionTitle0?: string;
    quesstionTitle1?: string;
    quesstionTitle2?: string;
    quesstionTitle3?: string;
    quesstionTitle4?: string;
    quesstionTitle5?: string;
    quesstionTitle6?: string;
    quesstionTitle7?: string;
    quesstionTitle8?: string;
    quesstionTitle9?: string;
    feedbacks?: FeedbackReportModel[];
    sessions?: SessionReportModel[];
}

export interface FeedbackReportModel {
    id?: number;
    createDate?: Date;
    averageRate?: string;
    answer0?: string;
    answer1?: string;
    answer2?: string;
    answer3?: string;
    answer4?: string;
    answer5?: string;
    answer6?: string;
    answer7?: string;
    answer8?: string;
    answer9?: string;
    maxRateQuestion0?: string;
    maxRateQuestion1?: string;
    maxRateQuestion2?: string;
    maxRateQuestion3?: string;
    maxRateQuestion4?: string;
    maxRateQuestion5?: string;
    maxRateQuestion6?: string;
    maxRateQuestion7?: string;
    maxRateQuestion8?: string;
    maxRateQuestion9?: string;
}

export interface SessionReportModel {
    id?: number;
    title?: string;
    speakerList?: string;
    location?: string;
    startDate?: Date;
    endDate?: Date;
    feedbackAllowed?: boolean;
    averageRate?: string;
    averageRateAnswer0?: string;
    averageRateAnswer1?: string;
    averageRateAnswer2?: string;
    averageRateAnswer3?: string;
    averageRateAnswer4?: string;
    averageRateAnswer5?: string;
    averageRateAnswer6?: string;
    averageRateAnswer7?: string;
    averageRateAnswer8?: string;
    averageRateAnswer9?: string;
    quesstionTitle0?: string;
    maxRateQuestion0?: string;
    quesstionTitle1?: string;
    maxRateQuestion1?: string;
    quesstionTitle2?: string;
    maxRateQuestion2?: string;
    quesstionTitle3?: string;
    maxRateQuestion3?: string;
    quesstionTitle4?: string;
    maxRateQuestion4?: string;
    quesstionTitle5?: string;
    maxRateQuestion5?: string;
    quesstionTitle6?: string;
    maxRateQuestion6?: string;
    quesstionTitle7?: string;
    maxRateQuestion7?: string;
    quesstionTitle8?: string;
    maxRateQuestion8?: string;
    quesstionTitle9?: string;
    maxRateQuestion9?: string;
    feedbacks?: FeedbackReportModel[];
}

export interface Event {
    id?: number;
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    title: string;
    description?: string;
    key?: string;
    link?: string;
    feedbackAllowed?: boolean;
    feedbackDefinitionId?: number;
    feedbackDefinition?: FeedbackDefinition;
    startDate?: Date;
    endDate?: Date;
    location?: string;
    organization?: string;
    activeFromDate?: Date;
    activeTillDate?: Date;
    tags?: string[];
    tagList?: string;
    feedbacks?: Feedback[];
    sessions?: Session[];
}

export interface FeedbackDefinition {
    id?: number;
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    title?: string;
    description?: string;
    active0?: boolean;
    order0?: number;
    weight0?: number;
    questionType0?: questionType0AsInteger;
    title0?: string;
    description0?: string;
    help0?: string;
    required0?: boolean;
    active1?: boolean;
    order1?: number;
    weight1?: number;
    questionType1?: questionType1AsInteger;
    title1?: string;
    description1?: string;
    help1?: string;
    required1?: boolean;
    active2?: boolean;
    order2?: number;
    weight2?: number;
    questionType2?: questionType2AsInteger;
    title2?: string;
    description2?: string;
    help2?: string;
    required2?: boolean;
    active3?: boolean;
    order3?: number;
    weight3?: number;
    questionType3?: questionType3AsInteger;
    title3?: string;
    description3?: string;
    help3?: string;
    required3?: boolean;
    active4?: boolean;
    order4?: number;
    weight4?: number;
    questionType4?: questionType4AsInteger;
    title4?: string;
    description4?: string;
    help4?: string;
    required4?: boolean;
    active5?: boolean;
    order5?: number;
    weight5?: number;
    questionType5?: questionType5AsInteger;
    title5?: string;
    description5?: string;
    help5?: string;
    required5?: boolean;
    active6?: boolean;
    order6?: number;
    weight6?: number;
    questionType6?: questionType6AsInteger;
    title6?: string;
    description6?: string;
    help6?: string;
    required6?: boolean;
    active7?: boolean;
    order7?: number;
    weight7?: number;
    questionType7?: questionType7AsInteger;
    title7?: string;
    description7?: string;
    help7?: string;
    required7?: boolean;
    active8?: boolean;
    order8?: number;
    weight8?: number;
    questionType8?: questionType8AsInteger;
    title8?: string;
    description8?: string;
    help8?: string;
    required8?: boolean;
    active9?: boolean;
    order9?: number;
    weight9?: number;
    questionType9?: questionType9AsInteger;
    title9?: string;
    description9?: string;
    help9?: string;
    required9?: boolean;
}

export interface Feedback {
    id?: number;
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    userId?: string;
    feedbackDefinitionId?: number;
    feedbackDefinition?: FeedbackDefinition;
    sessionId?: number;
    eventId?: number;
    averageRate?: string;
    answer0?: string;
    answer1?: string;
    answer2?: string;
    answer3?: string;
    answer4?: string;
    answer5?: string;
    answer6?: string;
    answer7?: string;
    answer8?: string;
    answer9?: string;
}

export interface Session {
    id?: number;
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    title: string;
    description?: string;
    startDate?: Date;
    endDate?: Date;
    location?: string;
    level?: string;
    type?: string;
    track?: string;
    key?: string;
    link?: string;
    activeFromDate?: Date;
    activeTillDate?: Date;
    feedbackAllowed?: boolean;
    feedbackDefinitionId?: number;
    feedbackDefinition?: FeedbackDefinition;
    eventId?: number;
    feedbacks?: Feedback[];
    speakers?: string[];
    speakerList?: string;
    tags?: string[];
    tagList?: string;
}

export interface Object {
}

export interface ResourceText {
    id?: number;
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    language?: string;
    key: string;
    group?: string;
    value?: string;
}

export interface RoleAdminBindingModel {
    name?: string;
    id?: string;
}

export interface LoginBindingModel {
    userName?: string;
    password?: string;
}

export interface User {
    active?: boolean;
    createDate?: Date;
    createdBy?: string;
    modifyDate?: Date;
    modifiedBy?: string;
    deleted?: boolean;
    deleteDate?: Date;
    deletedBy?: string;
    organization?: string;
    activeFromDate?: Date;
    activeTillDate?: Date;
    email?: string;
    emailConfirmed?: boolean;
    passwordHash?: string;
    securityStamp?: string;
    phoneNumber?: string;
    phoneNumberConfirmed?: boolean;
    twoFactorEnabled?: boolean;
    lockoutEndDateUtc?: Date;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    roles?: UserRole[];
    claims?: UserClaim[];
    logins?: UserLogin[];
    id?: string;
    userName?: string;
}

export interface UserRole {
    userId?: string;
    roleId?: string;
}

export interface UserClaim {
    id?: number;
    userId?: string;
    claimType?: string;
    claimValue?: string;
}

export interface UserLogin {
    loginProvider?: string;
    providerKey?: string;
    userId?: string;
}

export interface UserAdminBindingModel {
    userName?: string;
    organization?: string;
    email?: string;
    active?: boolean;
    roles?: string;
    password?: string;
    activeFrom?: Date;
    activeTill?: Date;
    id?: string;
}

export enum questionType0AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType1AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType2AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType3AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType4AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType5AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType6AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType7AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType8AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}

export enum questionType9AsInteger {
    Value0 = 0,
    Value1 = 1,
    Value10 = 10,
    Value11 = 11,
    Value12 = 12,
    Value20 = 20,
    Value21 = 21,
}